name: "Build tt-metal artifacts"

on:
  workflow_call:
    inputs:
      arch:
        required: false
        type: string
        default: '["grayskull", "wormhole_b0"]'
      profiler-build:
        required: false
        type: boolean
        default: false
        description: "Enable tracy and profiler build with _profiler attached to end of artifact"
  workflow_dispatch:
    inputs:
      arch:
        required: false
        type: string
        default: '["grayskull", "wormhole_b0"]'
      profiler-build:
        required: false
        type: boolean
        default: false
        description: "Enable tracy and profiler build with _profiler attached to end of artifact"

jobs:
  build-artifact:
    strategy:
      matrix:
        arch: ${{ fromJson(inputs.arch || '["grayskull", "wormhole_b0", "blackhole"]') }}
    env:
      TT_METAL_ENV: ${{ vars.TT_METAL_ENV }}
      ARCH_NAME: ${{ matrix.arch }}
      SILENT: 0
      VERBOSE: 1
    environment: dev
    runs-on: build
    steps:
      - uses: tenstorrent-metal/metal-workflows/.github/actions/checkout-with-submodule-lfs@v2.0.0
      - name: Set up dynamic env vars for build
        run: |
          echo "TT_METAL_HOME=$(pwd)" >> $GITHUB_ENV
      - name: Update submodules
        run: |
          git submodule update --init --recursive
      - name: cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/build/lib
            ${{ github.workspace }}/ttnn/ttnn/*.so
            ${{ github.workspace }}/build/programming_examples
            ${{ github.workspace }}/build/test
            ${{ github.workspace }}/build/tools
            ${{ github.workspace }}/runtime
          key: ${{ runner.os }}-build-${{ matrix.arch }}
          restore-keys: |
            ${{ runner.os }}-build-${{ matrix.arch }}-main
      - name: Build regular tt-metal and libs
        if: ${{ !inputs.profiler-build }}
        run: |
          cmake -B build -G Ninja
          cmake --build build --target tests
          cmake --build build --target install
      - name: Build profiler tt-metal and libs
        if: ${{ inputs.profiler-build }}
        run: ./scripts/build_scripts/build_with_profiler_opt.sh
      - name: 'Tar files'
        run: tar -cvf ttm_${{ matrix.arch }}.tar build/lib ttnn/ttnn/*.so build/programming_examples build/test build/tools runtime
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: TTMetal_build_${{ matrix.arch }}${{ (inputs.profiler-build && '_profiler') || '' }}
          path: ttm_${{ matrix.arch }}.tar
